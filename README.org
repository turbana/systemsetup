#+TITLE: System Setup
#+PROPERTY: header-args :tangle no
#+STARTUP: content

Going to try out a new distro / package manager [[https://guix.gnu.org/][Guix]]. It provides a declarative
OS configuration system, transactional updates, and user level package
management.

* Commands
While learning Guix I'd like to keep some notes on how to run some commands.

NOTE: these all assume the *.scm files are located under =~/.config/guix/=.

#+BEGIN_SRC shell
  # pull down updates
  guix system pull

  # update system
  sudo guix system -L ~/.config/guix/systems reconfigure path/to/system.scm

  # list system generations
  guix system list-generations

  # roll-back system
  guix system switch-generation <n>
#+END_SRC

* Systems
Here we define the state of the base system. We'll start by defining the base
operating system that the specific hosts will inherit from.

** Base
*guix/systems/base-system.scm:*
#+BEGIN_SRC scheme :tangle guix/systems/base-system.scm
  (define-module (base-system)
    #:use-module (gnu))
  (use-service-modules desktop networking ssh xorg)

  (define-public (base-operating-system boot-uuid root-uuid swap-uuid)
    (operating-system
     (locale "en_US.utf8")
     (timezone "America/Los_Angeles")
     (keyboard-layout (keyboard-layout "us"))
     (host-name "changeme")

     (bootloader
      (bootloader-configuration
       (bootloader grub-efi-bootloader)
       (target "/boot/efi")
       (keyboard-layout keyboard-layout)))

     (file-systems
      (cons* (file-system
               (mount-point "/boot/efi")
               (device (uuid boot-uuid 'fat32))
               (type "vfat"))
             (file-system
               (mount-point "/")
               (device
                (uuid root-uuid 'ext4))
               (type "ext4"))
             %base-file-systems))

     (swap-devices
      (list (uuid swap-uuid)))

     (users (cons* (user-account
                    (name "ian")
                    (comment "Ian Clark")
                    (group "users")
                    (home-directory "/home/ian")
                    (supplementary-groups
                     '("wheel" "netdev" "audio" "video")))
                   %base-user-accounts))

     (packages
      (append
       (map specification->package
            '("git"
              ;; use i3 as a "bootstrap" wm
              "i3-wm"
              "i3status"
              "dmenu"
              "st"
              ;; ssl certs
              "nss-certs"))
       %base-packages))

     (services
      (cons* (set-xorg-configuration
              (xorg-configuration
               (keyboard-layout keyboard-layout)))
             %desktop-services))))
#+END_SRC

** tornado
*guix/systems/tornado.scm:*
#+BEGIN_SRC scheme :tangle guix/systems/tornado.scm
  (define-module (tornado)
    #:export (tornado-system)
    #:use-module (base-system)
    #:use-module (gnu))

  (use-service-modules ssh)


  (let ((parent (base-operating-system
                 "5CD3-F7B5" ;; boot uuid
                 "39406bbf-01f9-4de2-88a9-d14a90fa2e75" ;; root uuid
                 "6e9af107-9d7b-4bc2-843c-9afe9d1a4660"))) ;; swap uuid
    (operating-system
      (inherit parent)
      (host-name "tornado")

      (services
       (cons* (service openssh-service-type)
              (operating-system-user-services parent)))))
#+END_SRC

* Sanity Check
I don't know of a way for =guix= to check that an operating system configuration is valid. So make a small file that just imports our system modules and if that doesn't raise any errors assume we're okay.

*guix/sanity-check.scm:*
#+BEGIN_SRC scheme :tangle guix/sanity-check.scm
  (define-module (sanity-check)
    #:declarative? #f
    #:use-module (gnu)
    #:use-module (ice-9 pretty-print)
    #:use-module ((base-system)
                  #:select (base-operating-system)))

  (define tornado (load "systems/tornado.scm"))

  (define (pretty-print-list L)
    (pretty-print (length L))
    (map pretty-print L))

  (define (services os)
    (map (lambda (s)
           (service-type-name (service-kind s)))
         (operating-system-services os)))


  ;; (let* (
  ;;        (base-list (services base-operating-system))
  ;;        (child-list (services tornado))
  ;;        (only-base (filter (lambda (e) (not (memq e child-list)))
  ;;                           base-list))
  ;;        (only-child (filter (lambda (e) (not (memq e base-list)))
  ;;                            child-list))
  ;;        (common (filter (lambda (e) (memq e child-list))
  ;;                        base-list))
  ;;        )
  ;;   (pretty-print "total child:")
  ;;   (pretty-print (length child-list))
  ;;   (pretty-print "total base:")
  ;;   (pretty-print (length base-list))
  ;;   (pretty-print "only child:")
  ;;   (pretty-print-list only-child)
  ;;   (pretty-print "only base:")
  ;;   (pretty-print-list only-base)
  ;;   (pretty-print "in common:")
  ;;   (pretty-print-list common)
  ;;   )

  (pretty-print-list (services tornado))
#+END_SRC

Push changes and test. Remember to =org-babel-tangle= first!
#+BEGIN_SRC shell :results output file :file out.log
  # push updates
  scp -r guix/ guix:.config/

  # check syntax errors
  ssh guix -- guile --no-auto-compile -L ~/.config/guix/systems -s ~/.config/guix/sanity-check.scm

  # check services
  # ssh guix -- guix system -L ~/.config/guix/systems extension-graph ~/.config/guix/systems/tornado.scm
#+END_SRC

#+RESULTS:
[[file:out.log]]
