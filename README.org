#+TITLE: System Setup
#+STARTUP: content

Provide complete workstation provisioning through ansible.

To bootstrap from a fresh Debian install run the following as root:
#+BEGIN_SRC shell :tangle no
  wget -q https://raw.githubusercontent.com/turbana/systemsetup/master/bootstrap.sh && sh bootstrap.sh
#+END_SRC

* Todo
** TODO hostname
** TODO auto login
** TODO python virtualenv / libraries
** TODO setup sudoers
** TODO cabal install / update
for xmonad at least
* Bootstrap
Before we can begin our Ansible playbook we need to do the following:
1. install ansible
2. install git
3. initialize ssh key
4. load ssh key into github

bootstrap.sh
#+BEGIN_SRC shell :tangle bootstrap.sh :tangle-mode (identity #o755)
  #!/bin/sh

  set -e

  GIT_REPO=https://github.com/turbana/systemsetup.git
  SOURCES=/etc/apt/sources.list
  TMP_SOURCES=/tmp/$$.sources.list

  if [ "$#" = "1" ]; then
      USER=$1
  else
      echo " * finding user"
      USER=$(id -un 1000)
  fi
  if [ -z "$USER" ]; then
      echo "ERROR: could not determine user; run '$(basename $0) <user>'"
      exit 2
  fi

  echo " * user is $USER"

  # add ansible repo
  if ! grep -q ansible $SOURCES; then
      echo " * add ansible apt repository"
      cp $SOURCES $TMP_SOURCES
      echo >> $TMP_SOURCES
      echo "# ansible repo" >> $TMP_SOURCES
      echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main" >> $TMP_SOURCES
      mv $TMP_SOURCES $SOURCES
  fi

  # dirmngr needed for apt-key
  echo " * install dirmngr"
  apt-get install -y dirmngr > /dev/null

  echo " * add ansible public apt key"
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367 > /dev/null

  echo " * update packages"
  apt-get update > /dev/null

  echo " * install ansible/git/sudo"
  apt-get install -y ansible python python-apt git sudo > /dev/null

  if [ ! -f $HOME/id_ecdsa ]; then
      echo " * generate ssh key"
      sudo -u $USER ssh-keygen -f /home/$USER/.ssh/id_ecdsa -t ecdsa -b 521
      echo " * MANUALLY add the public key to github"
      cat /home/$USER/.ssh/id_ecdsa.pub
      echo "Press enter to continue..."
      read ignore
  fi

  echo " * start ansible"
  ansible-pull -U $GIT_REPO -e user=$USER
#+END_SRC
* Ansible
#+BEGIN_SRC yaml :tangle local.yml
  - hosts: localhost
    become: true
    tasks:
      - import_tasks: tasks/apt.yml
        tags: packages
      - import_tasks: tasks/packages.yml
        tags: packages
      - import_tasks: tasks/git.yml
        become_user: "{{ user }}"
        tags: github
      - import_tasks: tasks/dotfiles.yml
        become_user: "{{ user }}"
        tags: dotfiles
      - import_tasks: tasks/emacs.yml
        become_user: "{{ user }}"
        tags: emacs
      - import_tasks: tasks/fonts.yml
        become_user: "{{ user }}"
        tags: fonts

    handlers:
      - import_tasks: handlers/handlers.yml
#+END_SRC

* Variables
#+BEGIN_SRC yaml :tangle group_vars/all.yml
  etc_root: ~/.etc
  app_root: ~/apps

  emacs_version: 26.3
  emacs_build_args: "--with-x-toolkit=yes"
  emacs_build_dir: "{{ app_root }}/src/emacs"
#+END_SRC

* Tasks
** Apt
#+BEGIN_SRC yaml :tangle tasks/apt.yml
  - name: update apt cache
    apt:
      update_cache: yes
      force_apt_get: yes
    changed_when: False

  - name: install aptitude
    apt:
      name: aptitude
      force_apt_get: yes

  - name: perform apt dist-upgrade
    apt:
      upgrade: full

  - name: perform apt update
    apt:
      name: "*"
      state: latest
#+END_SRC

** Packages
#+BEGIN_SRC yaml :tangle tasks/packages.yml
  - name: install system packages
    apt:
      name:
        - linux-headers-amd64
        - gcc
        - perl

  - name: install utility packages
    apt:
      name:
        - curl
        - screen
        - tree

  - name: install xmonad packages
    apt:
      name:
        - libx11-dev
        - libxrandr2
        - libxrandr-dev
        - libxss-dev
        - libgmp-dev
        - libghc-xmonad-dev
        - libghc-xmonad-contrib-dev
        - dmenu
        - dzen2
        - xclip

  - name: install python packages
    apt: name=python-pip

  - name: install emacs packages
    apt:
      name:
        - gcc
        - automake
        - autotools-dev
        - libmagick++-dev
        - libgtk2.0-dev
        - libxft-dev
        - libgnutls28-dev
        - libdbus-1-dev
        - libgif-dev
        - texinfo
        - libxmp4
        - libxpm-dev

  - name: install font packages
    apt:
      name:
        - fonts-adf-gillius       # Gillius ADF
        - texlive-fonts-extra     # Latin Modern Mono
#+END_SRC

** My github repos
#+BEGIN_SRC yaml :tangle tasks/git.yml
  - name: add github.com to known_hosts
    known_hosts:
      name: github.com
      key: "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="

  - name: checkout dotfiles repo
    git:
      repo: git@github.com:turbana/dotfiles.git
      dest: "{{ etc_root }}"
#+END_SRC
** Dotfiles
#+BEGIN_SRC yaml :tangle tasks/dotfiles.yml
  - name: create user directories
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - ~/.xmonad
      - ~/downloads
      - ~/.fonts

  - name: remove cruft directories
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "~/Desktop"
      - "~/Documents"
      - "~/Downloads"
      - "~/Music"
      - "~/Pictures"
      - "~/Public"
      - "~/Templates"
      - "~/Videos"

  - name: setup dotfile symlinks
    file:
      src: "{{ etc_root }}/{{ item.src }}"
      dest: ~/{{ item.dest }}
      state: link
      force: yes
    with_items:
      - { src: "bash_logout", dest: ".bash_logout" }
      - { src: "bashrc", dest: ".bashrc" }
      - { src: "dir_colors", dest: ".dir_colors" }
      - { src: "profile", dest: ".profile" }
      - { src: "screenrc", dest: ".screenrc" }
      - { src: "spacemacs/dotspacemacs", dest: ".spacemacs"}
      - { src: "xsession", dest: ".xsession" }
      - { src: "xresources", dest: ".xresources" }
      - { src: "xresources", dest: ".xresources" }
      - { src: "xmonad/black.png", dest: ".xmonad/black.png" }
      - { src: "xmonad/cpugraph.py", dest: ".xmonad/cpugraph.py" }
      - { src: "xmonad/dzen2-left-bar.sh", dest: ".xmonad/dzen2-left-bar.sh" }
      - { src: "xmonad/dzen2-right-bar.sh", dest: ".xmonad/dzen2-right-bar.sh" }
      - { src: "xmonad/xmonad.hs", dest: ".xmonad/xmonad.hs" }
#+END_SRC
** Emacs
#+BEGIN_SRC yaml :tangle tasks/emacs.yml
  - name: checkout emacs repo
    git:
      repo: git://git.savannah.gnu.org/emacs.git
      dest: "{{ emacs_build_dir }}"
      depth: 1
      version: emacs-{{ emacs_version }}


  - name: build emacs - autogen.sh
    command: sh autogen.sh
    args:
      chdir: "{{ emacs_build_dir }}"
      creates: "{{ emacs_build_dir }}/configure"

  - name: build emacs - configure
    command: ./configure --prefix={{ app_root | expanduser }} {{ emacs_build_args }}
    args:
      chdir: "{{ emacs_build_dir }}"
      creates: "{{ emacs_build_dir }}/Makefile"

  - name: build emacs - make
    command: make
    args:
      chdir: "{{ emacs_build_dir }}"
      creates: "{{ emacs_build_dir }}/src/emacs"

  - name: build emacs - make install
    command: make install
    args:
      chdir: "{{ emacs_build_dir }}"
      creates: "{{ app_root }}/bin/emacs"


  - name: checkout spacemacs repo
    git:
      repo: https://github.com/syl20bnr/spacemacs
      depth: 1
      dest: ~/.emacs.d


  - name: update emacs packages
    command: "{{ app_root }}/bin/emacs --batch -l ~/.emacs.d/init.el --eval='(progn (configuration-layer/update-packages t) (server-force-delete))'"
** Fonts
#+BEGIN_SRC yaml :tangle tasks/fonts.yml
  - name: checkout all-the-icons repo
    git:
      repo: https://github.com/domtronn/all-the-icons.el.git
      depth: 1
      dest: "{{ app_root }}/src/all-the-icons"

  - name: copy all-the-icons fonts
    copy:
      remote_src: yes
      src: "{{ app_root }}/src/all-the-icons/fonts/"
      dest: ~/.fonts/
    notify: reload fc-cache
#+END_SRC
* Handlers
#+BEGIN_SRC yaml :tangle handlers/handlers.yml
  - name: reload fc-cache
    command: fc-cache -fv
#+END_SRC
